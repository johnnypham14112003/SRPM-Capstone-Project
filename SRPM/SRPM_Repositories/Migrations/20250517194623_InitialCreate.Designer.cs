// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SRPM_Repositories.Migrations
{
    [DbContext(typeof(SRPMDbContext))]
    [Migration("20250517194623_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SRPM_Repositories.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternativeEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("AvatarURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DegreeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FacebookURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LinkedInURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MajorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SelfDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("MajorId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEvaluation")
                        .HasColumnType("bit");

                    b.Property<string>("MailDomain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Criterias");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.CriteriaEvaluate", b =>
                {
                    b.Property<Guid>("CriteriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("CriteriaId", "EvaluationId");

                    b.HasIndex("EvaluationId");

                    b.ToTable("CriteriaEvaluates");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalRate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Major", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.MemberTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TaskId");

                    b.ToTable("MemberTasks");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Milestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemSend")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MemberTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("MemberTaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectTeamId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.OTPCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Attempt")
                        .HasColumnType("tinyint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TTL")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("OTPCodes");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviations")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Budget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HostInstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LogoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumMember")
                        .HasColumnType("int");

                    b.Property<string>("PictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Progress")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("RequirementNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VietnameseTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HostInstitutionId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectField", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "FieldId");

                    b.HasIndex("FieldId");

                    b.ToTable("ProjectFields");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectMajor", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MajorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "MajorId");

                    b.HasIndex("MajorId");

                    b.ToTable("ProjectMajors");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTags");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecretary")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTeams");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ResearchPaper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrincipalInvestigatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Viewed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("PrincipalInvestigatorId");

                    b.ToTable("ResearchPapers");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Overdue")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Progress")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("MilestoneId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("FeeCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("HandleDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HandlePersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PayMethod")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiverAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverBankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RequestPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderBankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("TotalMoney")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransferContent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("HandlePersonId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestPersonId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Account", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Field", "Field")
                        .WithMany("Accounts")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Major", "Major")
                        .WithMany("Accounts")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.CriteriaEvaluate", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Criteria", "Criteria")
                        .WithMany("CriteriaEvaluates")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Evaluation", "Evaluation")
                        .WithMany("CriteriaEvaluates")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criteria");

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Evaluation", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "Creator")
                        .WithMany("Evaluations")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SRPM_Repositories.Models.Milestone", "Milestone")
                        .WithMany("Evaluations")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("Evaluations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SRPM_Repositories.Models.Task", "Task")
                        .WithMany("Evaluations")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Milestone");

                    b.Navigation("Project");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.MemberTask", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "Member")
                        .WithMany("MemberTasks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Task", "Task")
                        .WithMany("MemberTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Milestone", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Notification", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Evaluation", "Evaluation")
                        .WithMany("Notifications")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SRPM_Repositories.Models.MemberTask", "MemberTask")
                        .WithMany("Notifications")
                        .HasForeignKey("MemberTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("Notifications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SRPM_Repositories.Models.ProjectTeam", "ProjectTeam")
                        .WithMany("Notifications")
                        .HasForeignKey("ProjectTeamId");

                    b.HasOne("SRPM_Repositories.Models.Account", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SRPM_Repositories.Models.Account", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SRPM_Repositories.Models.Transaction", "Transaction")
                        .WithMany("Notifications")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Evaluation");

                    b.Navigation("MemberTask");

                    b.Navigation("Project");

                    b.Navigation("ProjectTeam");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.OTPCode", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "Account")
                        .WithMany("OTPCodes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Project", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "HostInstitution")
                        .WithMany()
                        .HasForeignKey("HostInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostInstitution");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectField", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Field", "Field")
                        .WithMany("ProjectFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("ProjectFields")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectMajor", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Major", "Major")
                        .WithMany("ProjectMajors")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("ProjectMajors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectTag", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("ProjectTags")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectTeam", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "Account")
                        .WithMany("ProjectTeams")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("ProjectTeams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ResearchPaper", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Field", "Field")
                        .WithMany("ResearchPapers")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Account", "PrincipalInvestigator")
                        .WithMany("ResearchPapers")
                        .HasForeignKey("PrincipalInvestigatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("PrincipalInvestigator");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Task", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Milestone", "Milestone")
                        .WithMany("Tasks")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Transaction", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "HandlePerson")
                        .WithMany("HandledTransactions")
                        .HasForeignKey("HandlePersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("Transactions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SRPM_Repositories.Models.Account", "RequestPerson")
                        .WithMany("RequestedTransactions")
                        .HasForeignKey("RequestPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HandlePerson");

                    b.Navigation("Project");

                    b.Navigation("RequestPerson");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Account", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("HandledTransactions");

                    b.Navigation("MemberTasks");

                    b.Navigation("OTPCodes");

                    b.Navigation("ProjectTeams");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("RequestedTransactions");

                    b.Navigation("ResearchPapers");

                    b.Navigation("SentNotifications");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Criteria", b =>
                {
                    b.Navigation("CriteriaEvaluates");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Evaluation", b =>
                {
                    b.Navigation("CriteriaEvaluates");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Field", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("ProjectFields");

                    b.Navigation("ResearchPapers");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Major", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("ProjectMajors");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.MemberTask", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Milestone", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Project", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Milestones");

                    b.Navigation("Notifications");

                    b.Navigation("ProjectFields");

                    b.Navigation("ProjectMajors");

                    b.Navigation("ProjectTags");

                    b.Navigation("ProjectTeams");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectTeam", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Task", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("MemberTasks");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Transaction", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
