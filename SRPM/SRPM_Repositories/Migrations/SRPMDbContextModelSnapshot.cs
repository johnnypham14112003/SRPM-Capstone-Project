// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SRPM_Repositories.Migrations
{
    [DbContext(typeof(SRPMDbContext))]
    partial class SRPMDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SRPM_Repositories.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternativeEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("AvatarURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FacebookURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LinkedInURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MajorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelfDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.AppraisalCouncil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppraisalCouncils");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ContentTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CellContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellContentAlign")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CellContentStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ColumnIndex")
                        .HasColumnType("int");

                    b.Property<string>("ColumnTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ColumnTitleAlign")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ColumnTitleStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FieldContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<string>("SubColumnTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SubColumnTitleAlign")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SubColumnTitleStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FieldContentId");

                    b.ToTable("ContentTables");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateInDoc")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("HaveHeader")
                        .HasColumnType("bit");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderAlign")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("HeaderStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsSigned")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SubHeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubHeaderAlign")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SubHeaderStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubTitleAlign")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SubTitleStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleAlign")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TitleStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UploadAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Uploader")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Uploader");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.DocumentField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Chapter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChapterAlign")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ChapterStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexInDoc")
                        .HasColumnType("int");

                    b.Property<string>("SubTitleAlign")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SubTitleStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleAlign")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TitleStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentFields");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CouncilId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FinalDocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte>("TotalRate")
                        .HasColumnType("tinyint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CouncilId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FinalDocId");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.EvaluationStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StageOrder")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.ToTable("EvaluationStages");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.FieldContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentAlign")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ContentStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexInField")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleAlign")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TitleStyle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentFieldId");

                    b.ToTable("FieldContents");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.IndividualEvaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EvaluationStageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("TotalRate")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationStageId");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("IndividualEvaluations");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Major", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.MemberTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Overdue")
                        .HasColumnType("int");

                    b.Property<decimal>("Progress")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TaskId");

                    b.ToTable("MemberTasks");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Milestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("money");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EvaluationStageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IndividualEvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemSend")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MemberTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("SystemConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("UserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("EvaluationStageId");

                    b.HasIndex("GroupUserId");

                    b.HasIndex("IndividualEvaluationId");

                    b.HasIndex("MemberTaskId");

                    b.HasIndex("SystemConfigurationId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.OTPCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Attempt")
                        .HasColumnType("tinyint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TTL")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("OTPCodes");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviations")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Budget")
                        .HasColumnType("money");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HostInstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LogoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumMember")
                        .HasColumnType("int");

                    b.Property<string>("PictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Progress")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("RequirementNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VietnameseTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("HostInstitutionId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectMajor", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MajorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "MajorId");

                    b.HasIndex("MajorId");

                    b.ToTable("ProjectMajors");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTags");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ResearchPaper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PrincipalInvestigatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Viewed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrincipalInvestigatorId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ResearchPapers");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsGroupRole")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.SystemConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfigKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemConfigurations");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Overdue")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Progress")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("MilestoneId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EvaluationStageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("FeeCost")
                        .HasColumnType("money");

                    b.Property<Guid?>("FundRequestDocId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("HandleDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HandlePersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PayMethod")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiverAccount")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ReceiverBankName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceiverName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RequestPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderAccount")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SenderBankName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SenderName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("money");

                    b.Property<string>("TransferContent")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DocumentId");

                    b.HasIndex("EvaluationStageId");

                    b.HasIndex("FundRequestDocId");

                    b.HasIndex("HandlePersonId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestPersonId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CouncilId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CouncilId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Account", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Major", "Major")
                        .WithMany("Accounts")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Major");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ContentTable", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.FieldContent", "FieldContent")
                        .WithMany("ContentTables")
                        .HasForeignKey("FieldContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldContent");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Document", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.Account", "UploaderAccount")
                        .WithMany("UploadedDocuments")
                        .HasForeignKey("Uploader")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UploaderAccount");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.DocumentField", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Document", "Document")
                        .WithMany("DocumentFields")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Evaluation", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.AppraisalCouncil", "Council")
                        .WithMany("Evaluations")
                        .HasForeignKey("CouncilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Document", null)
                        .WithMany("EvaluationsWithFinalDoc")
                        .HasForeignKey("DocumentId");

                    b.HasOne("SRPM_Repositories.Models.Document", "FinalDoc")
                        .WithMany()
                        .HasForeignKey("FinalDocId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.Milestone", "Milestone")
                        .WithMany("Evaluations")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("Evaluations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Council");

                    b.Navigation("FinalDoc");

                    b.Navigation("Milestone");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.EvaluationStage", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Evaluation", "Evaluation")
                        .WithMany("EvaluationStages")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.FieldContent", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.DocumentField", "DocumentField")
                        .WithMany("FieldContents")
                        .HasForeignKey("DocumentFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentField");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.IndividualEvaluation", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.EvaluationStage", "EvaluationStage")
                        .WithMany("IndividualEvaluations")
                        .HasForeignKey("EvaluationStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Milestone", "Milestone")
                        .WithMany()
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SRPM_Repositories.Models.Account", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EvaluationStage");

                    b.Navigation("Milestone");

                    b.Navigation("Project");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Major", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Field", "Field")
                        .WithMany("Majors")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.MemberTask", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "Member")
                        .WithMany("MemberTasks")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Task", "Task")
                        .WithMany("MemberTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Milestone", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "CreateByAccount")
                        .WithMany("CreatedMilestones")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateByAccount");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Notification", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Document", "Document")
                        .WithMany("Notifications")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.Evaluation", "Evaluation")
                        .WithMany("Notifications")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SRPM_Repositories.Models.EvaluationStage", "EvaluationStage")
                        .WithMany("Notifications")
                        .HasForeignKey("EvaluationStageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.UserRole", "GroupUser")
                        .WithMany()
                        .HasForeignKey("GroupUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.IndividualEvaluation", "IndividualEvaluation")
                        .WithMany("Notifications")
                        .HasForeignKey("IndividualEvaluationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.MemberTask", "MemberTask")
                        .WithMany("Notifications")
                        .HasForeignKey("MemberTaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.SystemConfiguration", "SystemConfiguration")
                        .WithMany("Notifications")
                        .HasForeignKey("SystemConfigurationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SRPM_Repositories.Models.Transaction", "Transaction")
                        .WithMany("Notifications")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.UserRole", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("Document");

                    b.Navigation("Evaluation");

                    b.Navigation("EvaluationStage");

                    b.Navigation("GroupUser");

                    b.Navigation("IndividualEvaluation");

                    b.Navigation("MemberTask");

                    b.Navigation("SystemConfiguration");

                    b.Navigation("Task");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.OTPCode", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "Account")
                        .WithMany("OTPCodes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Project", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "CreatedByAccount")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Account", "HostInstitution")
                        .WithMany("ProjectsAsHost")
                        .HasForeignKey("HostInstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByAccount");

                    b.Navigation("HostInstitution");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectMajor", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Major", "Major")
                        .WithMany("ProjectMajors")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("ProjectMajors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ProjectTag", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("ProjectTags")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.ResearchPaper", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "PrincipalInvestigator")
                        .WithMany()
                        .HasForeignKey("PrincipalInvestigatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithOne("ResearchPaper")
                        .HasForeignKey("SRPM_Repositories.Models.ResearchPaper", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrincipalInvestigator");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Task", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "CreateByAccount")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Milestone", "Milestone")
                        .WithMany("Tasks")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateByAccount");

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Transaction", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Document", null)
                        .WithMany("FundRequestTransactions")
                        .HasForeignKey("DocumentId");

                    b.HasOne("SRPM_Repositories.Models.EvaluationStage", "EvaluationStage")
                        .WithMany("Transactions")
                        .HasForeignKey("EvaluationStageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.Document", "FundRequestDoc")
                        .WithMany()
                        .HasForeignKey("FundRequestDocId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.Account", "HandlePerson")
                        .WithMany()
                        .HasForeignKey("HandlePersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.Account", "RequestPerson")
                        .WithMany()
                        .HasForeignKey("RequestPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EvaluationStage");

                    b.Navigation("FundRequestDoc");

                    b.Navigation("HandlePerson");

                    b.Navigation("Project");

                    b.Navigation("RequestPerson");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.UserRole", b =>
                {
                    b.HasOne("SRPM_Repositories.Models.Account", "Account")
                        .WithMany("UserRoles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SRPM_Repositories.Models.AppraisalCouncil", "Council")
                        .WithMany("UserRoles")
                        .HasForeignKey("CouncilId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.Project", "Project")
                        .WithMany("UserRoles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SRPM_Repositories.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Council");

                    b.Navigation("Project");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Account", b =>
                {
                    b.Navigation("CreatedMilestones");

                    b.Navigation("CreatedProjects");

                    b.Navigation("CreatedTasks");

                    b.Navigation("MemberTasks");

                    b.Navigation("OTPCodes");

                    b.Navigation("ProjectsAsHost");

                    b.Navigation("UploadedDocuments");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.AppraisalCouncil", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Document", b =>
                {
                    b.Navigation("DocumentFields");

                    b.Navigation("EvaluationsWithFinalDoc");

                    b.Navigation("FundRequestTransactions");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.DocumentField", b =>
                {
                    b.Navigation("FieldContents");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Evaluation", b =>
                {
                    b.Navigation("EvaluationStages");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.EvaluationStage", b =>
                {
                    b.Navigation("IndividualEvaluations");

                    b.Navigation("Notifications");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Field", b =>
                {
                    b.Navigation("Majors");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.FieldContent", b =>
                {
                    b.Navigation("ContentTables");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.IndividualEvaluation", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Major", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("ProjectMajors");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.MemberTask", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Milestone", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Project", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Evaluations");

                    b.Navigation("Milestones");

                    b.Navigation("ProjectMajors");

                    b.Navigation("ProjectTags");

                    b.Navigation("ResearchPaper")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.SystemConfiguration", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Task", b =>
                {
                    b.Navigation("MemberTasks");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.Transaction", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SRPM_Repositories.Models.UserRole", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
